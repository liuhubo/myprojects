<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xmlns:task="http://www.springframework.org/schema/task" xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.4.xsd
    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd">

   <!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:configs/jdbc.properties</value>
                <value>classpath:configs/config.properties</value>
                <value>classpath:configs/common.properties</value>
            </list>
        </property>
    </bean> 
    
    <import resource="datasource.xml"/>
    

    <task:annotation-driven scheduler="syncTestAccountScheduler"/>
    <task:scheduler id="syncTestAccountScheduler" pool-size="10"/>-->
    <tx:annotation-driven/>
    <context:component-scan base-package="com.hello"/>

    <!-- 创建SqlSessionFactory，同时指定数据源 -->
  <!--   <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dynamicDataSource"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"/>
    </bean> -->

    <!--通过模板定制mybatis的行为 -->
    <!-- <bean id="sqlSessionTemplateSimple" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
        <constructor-arg index="1" value="SIMPLE"/>
    </bean> -->

    <!-- 采用自动扫描方式创建mapper bean(单个更新模式) -->
   <!--  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.easybike.workflow.dao"/>
        <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplateSimple"/>
    </bean> -->
	
	<bean id="jedisPoolConfig"
          class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="16" />
		<property name="maxIdle" value="16" />
		<property name="minIdle" value="0" />
		<property name="maxWaitMillis" value="3000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="numTestsPerEvictionRun" value="3" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="true" />
    </bean>
	
    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="127.0.0.1"/>
        <property name="port" value="6379"/>
        <property name="database" value="0"/>
        <property name="password" value="hello@123"/>
        <property name="poolConfig" ref="jedisPoolConfig" />
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"
          p:connection-factory-ref="jedisConnectionFactory"/>
          
    <bean id="jedisClusterPoolConfig" class="redis.clients.jedis.JedisPoolConfig" scope="prototype">
        <property name="minIdle" value="32"/>
        <property name="maxIdle" value="64"/>
        <property name="maxTotal" value="128"/>
        <property name="testOnBorrow" value="true" />
        <property name="testOnReturn" value="true"/>
        <property name="testWhileIdle" value="true"/>
        <property name="minEvictableIdleTimeMillis" value="60000"/>
        <property name="timeBetweenEvictionRunsMillis" value="30000"/>
        <property name="numTestsPerEvictionRun" value="-1"/>
    </bean>

   <!-- <bean id="jedisClusterClient" class="com.easybike.workflow.util.redis.JedisClusterClient" factory-method="getInstance">
        <constructor-arg name="poolConfig" ref="jedisClusterPoolConfig" />
        <constructor-arg name="host" value="${redisCluster.host}" />
        <constructor-arg name="port" value="${redisCluster.port}" />
        <constructor-arg name="connectionTimeout" value="5000" />
        <constructor-arg name="soTimeout" value="5000" />
        <constructor-arg name="maxAttempts" value="3" />
        <constructor-arg name="password"><null/></constructor-arg>
    </bean>--> 

    <!-- rabbit MQ -->
    <rabbit:connection-factory id="connectionFactory"
                               host="localhost" username="guest" password="guest"
                               port="5672" virtual-host="/"/>
    <rabbit:admin connection-factory="connectionFactory"/>
   
    <rabbit:template id="amqpTemplate" connection-factory="connectionFactory"/>
    
    <!-- queue 队列声明-->
    <rabbit:queue durable="true" auto-delete="false" exclusive="false" name="queue_1"/>
    <rabbit:queue durable="true" auto-delete="false" exclusive="false" name="queue_2"/>
    <!-- <bean id="startupListener" class="com.easybike.workflow.base.listener.StartupListener"/> -->

</beans>
